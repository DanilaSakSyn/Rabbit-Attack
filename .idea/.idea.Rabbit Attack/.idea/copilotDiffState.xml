<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/GameManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/GameManager.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;&#10;public class GameManager : MonoBehaviour&#10;{&#10;    public RabbitController rabbitController;&#10;    public CarrotCell[] carrotCells;&#10;    public float gameTime = 60f;&#10;    public GameObject loseScreen;&#10;    private float timer;&#10;    private bool isGameOver = false;&#10;&#10;    private void Start()&#10;    {&#10;        timer = gameTime;&#10;        loseScreen.SetActive(false);&#10;    }&#10;&#10;    private void Update()&#10;    {&#10;        if (isGameOver) return;&#10;        timer -= Time.deltaTime;&#10;        if (timer &lt;= 0f)&#10;        {&#10;            EndGame();&#10;        }&#10;        else if (AllCarrotsGone())&#10;        {&#10;            EndGame();&#10;        }&#10;    }&#10;&#10;    private bool AllCarrotsGone()&#10;    {&#10;        foreach (var cell in carrotCells)&#10;        {&#10;            if (cell.hasCarrot)&#10;                return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void EndGame()&#10;    {&#10;        isGameOver = true;&#10;        rabbitController.enabled = false;&#10;        loseScreen.SetActive(true);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/Rabbit.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/Rabbit.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using UnityEngine;&#10;using UnityEngine.EventSystems;&#10;using UnityEngine.UI;&#10;&#10;namespace Project.Scripts&#10;{&#10;    public class Rabbit : MonoBehaviour, IPointerClickHandler&#10;    {&#10;        public CarrotCell targetCell;&#10;        public SpriteRenderer rabbitSpriteRenderer;&#10;        public Sprite rabbitNormalSprite;&#10;        public Sprite rabbitEatSprite;&#10;        public Animator animator;&#10;&#10;        private bool isClicked = false;&#10;        public RabbitController controller;&#10;&#10;        void Start()&#10;        {&#10;            StartCoroutine(RabbitLifeCycle());&#10;        }&#10;&#10;        IEnumerator RabbitLifeCycle()&#10;        {&#10;            yield return new WaitForSeconds(10f);&#10;            if (!isClicked)&#10;            {&#10;                if (targetCell != null)&#10;                    targetCell.ShowCarrot(false);&#10;                if (rabbitSpriteRenderer != null &amp;&amp; rabbitEatSprite != null)&#10;                    rabbitSpriteRenderer.sprite = rabbitEatSprite;&#10;                yield return new WaitForSeconds(1f);&#10;                controller.OnRabbitRemoved();&#10;                Destroy(gameObject);&#10;              &#10;            }&#10;        }&#10;&#10;        // void OnMouseDown()&#10;        // {&#10;        //     if (!isClicked)&#10;        //     {&#10;        //         isClicked = true;&#10;        //         if (animator != null)&#10;        //             animator.SetTrigger(&quot;Clicked&quot;);&#10;        //         controller.OnRabbitRemoved();&#10;        //     &#10;        //         Destroy(gameObject, 1.3f);&#10;        //     }&#10;        // }&#10;&#10;        public void OnPointerClick(PointerEventData eventData)&#10;        {&#10;            if (!isClicked)&#10;            {&#10;                isClicked = true;&#10;                if (animator != null)&#10;                    animator.SetTrigger(&quot;Clicked&quot;);&#10;                controller.OnRabbitRemoved();&#10;            &#10;                Destroy(gameObject, 1.3f);&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using UnityEngine;&#10;using UnityEngine.EventSystems;&#10;using UnityEngine.UI;&#10;&#10;namespace Project.Scripts&#10;{&#10;    public class Rabbit : MonoBehaviour, IPointerClickHandler&#10;    {&#10;        public CarrotCell targetCell;&#10;        public SpriteRenderer rabbitSpriteRenderer;&#10;        public Sprite rabbitNormalSprite;&#10;        public Sprite rabbitEatSprite;&#10;        public Animator animator;&#10;&#10;        private bool isClicked = false;&#10;        public RabbitController controller;&#10;&#10;        public GameObject timerIndicatorPrefab;&#10;        public Canvas uiCanvas;&#10;        private Image timerImage;&#10;        private GameObject timerInstance;&#10;        private float timerDuration = 10f;&#10;        private float timerElapsed = 0f;&#10;&#10;        void Start()&#10;        {&#10;            SpawnTimerIndicator();&#10;            StartCoroutine(RabbitLifeCycle());&#10;        }&#10;&#10;        void SpawnTimerIndicator()&#10;        {&#10;            if (timerIndicatorPrefab != null &amp;&amp; uiCanvas != null)&#10;            {&#10;                timerInstance = Instantiate(timerIndicatorPrefab, uiCanvas.transform);&#10;                timerImage = timerInstance.GetComponentInChildren&lt;Image&gt;();&#10;                UpdateTimerIndicatorPosition();&#10;            }&#10;        }&#10;&#10;        void UpdateTimerIndicatorPosition()&#10;        {&#10;            if (timerInstance != null)&#10;            {&#10;                Vector3 screenPos = Camera.main.WorldToScreenPoint(transform.position);&#10;                timerInstance.transform.position = screenPos;&#10;            }&#10;        }&#10;&#10;        void Update()&#10;        {&#10;            if (timerInstance != null)&#10;                UpdateTimerIndicatorPosition();&#10;        }&#10;&#10;        IEnumerator RabbitLifeCycle()&#10;        {&#10;            timerElapsed = 0f;&#10;            while (timerElapsed &lt; timerDuration &amp;&amp; !isClicked)&#10;            {&#10;                timerElapsed += Time.deltaTime;&#10;                if (timerImage != null)&#10;                    timerImage.fillAmount = 1f - (timerElapsed / timerDuration);&#10;                yield return null;&#10;            }&#10;            if (!isClicked)&#10;            {&#10;                if (targetCell != null)&#10;                    targetCell.ShowCarrot(false);&#10;                if (rabbitSpriteRenderer != null &amp;&amp; rabbitEatSprite != null)&#10;                    rabbitSpriteRenderer.sprite = rabbitEatSprite;&#10;                yield return new WaitForSeconds(1f);&#10;                controller.OnRabbitRemoved();&#10;                Destroy(timerInstance);&#10;                Destroy(gameObject);&#10;            }&#10;        }&#10;&#10;        public void OnPointerClick(PointerEventData eventData)&#10;        {&#10;            if (!isClicked)&#10;            {&#10;                isClicked = true;&#10;                if (animator != null)&#10;                    animator.SetTrigger(&quot;Clicked&quot;);&#10;                controller.OnRabbitRemoved();&#10;                Destroy(timerInstance);&#10;                Destroy(gameObject, 1.3f);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>