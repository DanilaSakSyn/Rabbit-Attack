<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinApplier.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinApplier.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public class SkinApplier : MonoBehaviour&#10;{&#10;    [Header(&quot;Skin Components&quot;)]&#10;    [SerializeField] private SpriteRenderer spriteRenderer;&#10;    [SerializeField] private MeshRenderer meshRenderer;&#10;    [SerializeField] private Image uiImage;&#10;    &#10;    [Header(&quot;Default Skin&quot;)]&#10;    [SerializeField] private Sprite defaultSprite;&#10;    [SerializeField] private Material defaultMaterial;&#10;    &#10;    private void Start()&#10;    {&#10;        // Подписываемся на события смены скина&#10;        SkinManager.OnSkinEquipped += OnSkinEquipped;&#10;        SkinManager.OnSkinsInitialized += OnSkinsInitialized;&#10;        &#10;        // Применяем текущий скин, если он уже установлен&#10;        ApplyCurrentSkin();&#10;    }&#10;    &#10;    private void OnDestroy()&#10;    {&#10;        // Отписываемся от событий&#10;        SkinManager.OnSkinEquipped -= OnSkinEquipped;&#10;        SkinManager.OnSkinsInitialized -= OnSkinsInitialized;&#10;    }&#10;    &#10;    private void OnSkinEquipped(SkinItem skinItem)&#10;    {&#10;        ApplySkin(skinItem);&#10;    }&#10;    &#10;    private void OnSkinsInitialized()&#10;    {&#10;        ApplyCurrentSkin();&#10;    }&#10;    &#10;    private void ApplyCurrentSkin()&#10;    {&#10;        if (SkinManager.Instance?.CurrentSkin != null)&#10;        {&#10;            ApplySkin(SkinManager.Instance.CurrentSkin);&#10;        }&#10;        else&#10;        {&#10;            ApplyDefaultSkin();&#10;        }&#10;    }&#10;    &#10;    public void ApplySkin(SkinItem skinItem)&#10;    {&#10;        if (skinItem?.skinData == null) return;&#10;        &#10;        SkinData skinData = skinItem.skinData;&#10;        &#10;        // Применяем спрайт для SpriteRenderer&#10;        if (spriteRenderer != null)&#10;        {&#10;            if (skinData.skinSprites != null &amp;&amp; skinData.skinSprites.Length &gt; 0)&#10;            {&#10;                spriteRenderer.sprite = skinData.skinSprites[0];&#10;            }&#10;            else if (skinData.skinPreview != null)&#10;            {&#10;                spriteRenderer.sprite = skinData.skinPreview;&#10;            }&#10;        }&#10;        &#10;        // Применяем материал для MeshRenderer&#10;        if (meshRenderer != null &amp;&amp; skinData.skinMaterial != null)&#10;        {&#10;            meshRenderer.material = skinData.skinMaterial;&#10;        }&#10;        &#10;        // Применяем спрайт для UI Image&#10;        if (uiImage != null)&#10;        {&#10;            if (skinData.skinIcon != null)&#10;            {&#10;                uiImage.sprite = skinData.skinIcon;&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void ApplyDefaultSkin()&#10;    {&#10;        // Применяем дефолтные настройки&#10;        if (spriteRenderer != null &amp;&amp; defaultSprite != null)&#10;        {&#10;            spriteRenderer.sprite = defaultSprite;&#10;        }&#10;        &#10;        if (meshRenderer != null &amp;&amp; defaultMaterial != null)&#10;        {&#10;            meshRenderer.material = defaultMaterial;&#10;        }&#10;        &#10;        if (uiImage != null &amp;&amp; defaultSprite != null)&#10;        {&#10;            uiImage.sprite = defaultSprite;&#10;        }&#10;    }&#10;    &#10;    // Метод для ручной установки компонентов&#10;    public void SetSpriteRenderer(SpriteRenderer renderer)&#10;    {&#10;        spriteRenderer = renderer;&#10;        ApplyCurrentSkin();&#10;    }&#10;    &#10;    public void SetMeshRenderer(MeshRenderer renderer)&#10;    {&#10;        meshRenderer = renderer;&#10;        ApplyCurrentSkin();&#10;    }&#10;    &#10;    public void SetUIImage(Image image)&#10;    {&#10;        uiImage = image;&#10;        ApplyCurrentSkin();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinData.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;[CreateAssetMenu(fileName = &quot;New Skin&quot;, menuName = &quot;Shop/Skin Data&quot;)]&#10;public class SkinData : ScriptableObject&#10;{&#10;    [Header(&quot;Skin Information&quot;)]&#10;    public string skinName;&#10;    public string skinDescription;&#10;    public Sprite skinIcon;&#10;    public Sprite skinPreview;&#10;    &#10;    [Header(&quot;Pricing&quot;)]&#10;    public int coinPrice = 0;&#10;    public int gemPrice = 0;&#10;    &#10;    [Header(&quot;Skin Properties&quot;)]&#10;    public bool isDefault = false;&#10;    public bool isUnlocked = false;&#10;    &#10;    [Header(&quot;Visual Data&quot;)]&#10;    public Material skinMaterial;&#10;    public Sprite[] skinSprites;&#10;    &#10;    public bool CanBePurchased()&#10;    {&#10;        return !isDefault &amp;&amp; !isUnlocked &amp;&amp; (coinPrice &gt; 0 || gemPrice &gt; 0);&#10;    }&#10;    &#10;    public bool HasCoinPrice()&#10;    {&#10;        return coinPrice &gt; 0;&#10;    }&#10;    &#10;    public bool HasGemPrice()&#10;    {&#10;        return gemPrice &gt; 0;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinItem.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinItem.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System;&#10;&#10;[System.Serializable]&#10;public class SkinItem&#10;{&#10;    public string skinId;&#10;    public SkinData skinData;&#10;    public bool isOwned;&#10;    public bool isEquipped;&#10;    &#10;    public SkinItem(string id, SkinData data)&#10;    {&#10;        skinId = id;&#10;        skinData = data;&#10;        isOwned = data.isDefault;&#10;        isEquipped = data.isDefault;&#10;    }&#10;    &#10;    public bool CanPurchase()&#10;    {&#10;        if (isOwned) return false;&#10;        &#10;        if (skinData.HasCoinPrice())&#10;        {&#10;            return Wallet.Instance.HasEnoughCoins(skinData.coinPrice);&#10;        }&#10;        else if (skinData.HasGemPrice())&#10;        {&#10;            return Wallet.Instance.HasEnoughGems(skinData.gemPrice);&#10;        }&#10;        &#10;        return false;&#10;    }&#10;    &#10;    public bool TryPurchase()&#10;    {&#10;        if (isOwned) return false;&#10;        &#10;        bool purchaseSuccess = false;&#10;        &#10;        if (skinData.HasCoinPrice())&#10;        {&#10;            purchaseSuccess = Wallet.Instance.SpendCoins(skinData.coinPrice);&#10;        }&#10;        else if (skinData.HasGemPrice())&#10;        {&#10;            purchaseSuccess = Wallet.Instance.SpendGems(skinData.gemPrice);&#10;        }&#10;        &#10;        if (purchaseSuccess)&#10;        {&#10;            isOwned = true;&#10;            SkinManager.Instance?.SaveSkinData(skinId, isOwned, isEquipped);&#10;        }&#10;        &#10;        return purchaseSuccess;&#10;    }&#10;    &#10;    public void Equip()&#10;    {&#10;        if (!isOwned) return;&#10;        &#10;        isEquipped = true;&#10;        SkinManager.Instance?.EquipSkin(this);&#10;    }&#10;    &#10;    public void Unequip()&#10;    {&#10;        isEquipped = false;&#10;        SkinManager.Instance?.SaveSkinData(skinId, isOwned, isEquipped);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinManager.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;using System.Linq;&#10;using System;&#10;&#10;public class SkinManager : MonoBehaviour&#10;{&#10;    public static SkinManager Instance { get; private set; }&#10;    &#10;    [Header(&quot;Skin Configuration&quot;)]&#10;    [SerializeField] private SkinData[] availableSkins;&#10;    &#10;    private Dictionary&lt;string, SkinItem&gt; skinItems = new Dictionary&lt;string, SkinItem&gt;();&#10;    private SkinItem currentEquippedSkin;&#10;    &#10;    public static event Action&lt;SkinItem&gt; OnSkinPurchased;&#10;    public static event Action&lt;SkinItem&gt; OnSkinEquipped;&#10;    public static event Action OnSkinsInitialized;&#10;    &#10;    public SkinItem CurrentSkin =&gt; currentEquippedSkin;&#10;    public IEnumerable&lt;SkinItem&gt; AllSkins =&gt; skinItems.Values;&#10;    public IEnumerable&lt;SkinItem&gt; OwnedSkins =&gt; skinItems.Values.Where(s =&gt; s.isOwned);&#10;    public IEnumerable&lt;SkinItem&gt; AvailableForPurchase =&gt; skinItems.Values.Where(s =&gt; s.skinData.CanBePurchased());&#10;    &#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;            DontDestroyOnLoad(gameObject);&#10;            InitializeSkins();&#10;        }&#10;        else&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;    }&#10;    &#10;    private void InitializeSkins()&#10;    {&#10;        skinItems.Clear();&#10;        &#10;        for (int i = 0; i &lt; availableSkins.Length; i++)&#10;        {&#10;            SkinData skinData = availableSkins[i];&#10;            string skinId = $&quot;skin_{i}_{skinData.skinName}&quot;;&#10;            &#10;            SkinItem skinItem = new SkinItem(skinId, skinData);&#10;            &#10;            // Загружаем сохраненные данные&#10;            LoadSkinData(skinId, skinItem);&#10;            &#10;            skinItems[skinId] = skinItem;&#10;            &#10;            // Устанавливаем дефолтный скин как экипированный&#10;            if (skinData.isDefault)&#10;            {&#10;                currentEquippedSkin = skinItem;&#10;            }&#10;        }&#10;        &#10;        // Если нет экипированного скина, берем первый доступный&#10;        if (currentEquippedSkin == null &amp;&amp; skinItems.Count &gt; 0)&#10;        {&#10;            var firstOwned = skinItems.Values.FirstOrDefault(s =&gt; s.isOwned);&#10;            if (firstOwned != null)&#10;            {&#10;                EquipSkin(firstOwned);&#10;            }&#10;        }&#10;        &#10;        OnSkinsInitialized?.Invoke();&#10;    }&#10;    &#10;    public bool PurchaseSkin(string skinId)&#10;    {&#10;        if (!skinItems.ContainsKey(skinId)) return false;&#10;        &#10;        SkinItem skinItem = skinItems[skinId];&#10;        bool success = skinItem.TryPurchase();&#10;        &#10;        if (success)&#10;        {&#10;            OnSkinPurchased?.Invoke(skinItem);&#10;        }&#10;        &#10;        return success;&#10;    }&#10;    &#10;    public void EquipSkin(SkinItem skinItem)&#10;    {&#10;        if (!skinItem.isOwned) return;&#10;        &#10;        // Снимаем предыдущий скин&#10;        if (currentEquippedSkin != null)&#10;        {&#10;            currentEquippedSkin.Unequip();&#10;        }&#10;        &#10;        // Экипируем новый скин&#10;        skinItem.Equip();&#10;        currentEquippedSkin = skinItem;&#10;        &#10;        OnSkinEquipped?.Invoke(skinItem);&#10;    }&#10;    &#10;    public bool EquipSkin(string skinId)&#10;    {&#10;        if (!skinItems.ContainsKey(skinId)) return false;&#10;        &#10;        SkinItem skinItem = skinItems[skinId];&#10;        if (!skinItem.isOwned) return false;&#10;        &#10;        EquipSkin(skinItem);&#10;        return true;&#10;    }&#10;    &#10;    public SkinItem GetSkin(string skinId)&#10;    {&#10;        return skinItems.ContainsKey(skinId) ? skinItems[skinId] : null;&#10;    }&#10;    &#10;    public bool IsSkinOwned(string skinId)&#10;    {&#10;        return skinItems.ContainsKey(skinId) &amp;&amp; skinItems[skinId].isOwned;&#10;    }&#10;    &#10;    public bool IsSkinEquipped(string skinId)&#10;    {&#10;        return skinItems.ContainsKey(skinId) &amp;&amp; skinItems[skinId].isEquipped;&#10;    }&#10;    &#10;    #region Save/Load&#10;    public void SaveSkinData(string skinId, bool isOwned, bool isEquipped)&#10;    {&#10;        PlayerPrefs.SetInt($&quot;Skin_{skinId}_Owned&quot;, isOwned ? 1 : 0);&#10;        PlayerPrefs.SetInt($&quot;Skin_{skinId}_Equipped&quot;, isEquipped ? 1 : 0);&#10;        PlayerPrefs.Save();&#10;    }&#10;    &#10;    private void LoadSkinData(string skinId, SkinItem skinItem)&#10;    {&#10;        skinItem.isOwned = PlayerPrefs.GetInt($&quot;Skin_{skinId}_Owned&quot;, skinItem.skinData.isDefault ? 1 : 0) == 1;&#10;        skinItem.isEquipped = PlayerPrefs.GetInt($&quot;Skin_{skinId}_Equipped&quot;, skinItem.skinData.isDefault ? 1 : 0) == 1;&#10;    }&#10;    &#10;    public void SaveAllSkinData()&#10;    {&#10;        foreach (var skinPair in skinItems)&#10;        {&#10;            SaveSkinData(skinPair.Key, skinPair.Value.isOwned, skinPair.Value.isEquipped);&#10;        }&#10;    }&#10;    #endregion&#10;    &#10;    private void OnApplicationPause(bool pauseStatus)&#10;    {&#10;        if (pauseStatus)&#10;            SaveAllSkinData();&#10;    }&#10;    &#10;    private void OnApplicationFocus(bool hasFocus)&#10;    {&#10;        if (!hasFocus)&#10;            SaveAllSkinData();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinShopItem.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinShopItem.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using TMPro;&#10;&#10;public class SkinShopItem : MonoBehaviour&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private Image skinIcon;&#10;    [SerializeField] private TextMeshProUGUI skinNameText;&#10;    [SerializeField] private TextMeshProUGUI priceText;&#10;    [SerializeField] private Button purchaseButton;&#10;    [SerializeField] private Button equipButton;&#10;    [SerializeField] private GameObject ownedIndicator;&#10;    [SerializeField] private GameObject equippedIndicator;&#10;    [SerializeField] private Image currencyIcon;&#10;    [SerializeField] private Sprite coinIcon;&#10;    [SerializeField] private Sprite gemIcon;&#10;    &#10;    private SkinItem skinItem;&#10;    private SkinShopUI shopUI;&#10;    &#10;    public void Initialize(SkinItem item, SkinShopUI shop)&#10;    {&#10;        skinItem = item;&#10;        shopUI = shop;&#10;        &#10;        UpdateUI();&#10;        &#10;        purchaseButton.onClick.RemoveAllListeners();&#10;        purchaseButton.onClick.AddListener(OnPurchaseClicked);&#10;        &#10;        equipButton.onClick.RemoveAllListeners();&#10;        equipButton.onClick.AddListener(OnEquipClicked);&#10;    }&#10;    &#10;    private void UpdateUI()&#10;    {&#10;        if (skinItem == null) return;&#10;        &#10;        // Обновляем основную информацию&#10;        skinIcon.sprite = skinItem.skinData.skinIcon;&#10;        skinNameText.text = skinItem.skinData.skinName;&#10;        &#10;        // Обновляем состояние кнопок и индикаторов&#10;        bool isOwned = skinItem.isOwned;&#10;        bool isEquipped = skinItem.isEquipped;&#10;        bool canPurchase = skinItem.CanPurchase();&#10;        &#10;        ownedIndicator.SetActive(isOwned);&#10;        equippedIndicator.SetActive(isEquipped);&#10;        &#10;        // Настраиваем кнопки&#10;        purchaseButton.gameObject.SetActive(!isOwned);&#10;        equipButton.gameObject.SetActive(isOwned &amp;&amp; !isEquipped);&#10;        &#10;        if (!isOwned)&#10;        {&#10;            // Настраиваем цену и валюту&#10;            if (skinItem.skinData.HasCoinPrice())&#10;            {&#10;                priceText.text = skinItem.skinData.coinPrice.ToString();&#10;                currencyIcon.sprite = coinIcon;&#10;            }&#10;            else if (skinItem.skinData.HasGemPrice())&#10;            {&#10;                priceText.text = skinItem.skinData.gemPrice.ToString();&#10;                currencyIcon.sprite = gemIcon;&#10;            }&#10;            &#10;            purchaseButton.interactable = canPurchase;&#10;        }&#10;        else&#10;        {&#10;            priceText.text = &quot;OWNED&quot;;&#10;        }&#10;    }&#10;    &#10;    private void OnPurchaseClicked()&#10;    {&#10;        if (skinItem == null || skinItem.isOwned) return;&#10;        &#10;        bool success = SkinManager.Instance.PurchaseSkin(skinItem.skinId);&#10;        &#10;        if (success)&#10;        {&#10;            UpdateUI();&#10;            shopUI?.OnSkinPurchased(skinItem);&#10;        }&#10;        else&#10;        {&#10;            shopUI?.ShowInsufficientFundsMessage();&#10;        }&#10;    }&#10;    &#10;    private void OnEquipClicked()&#10;    {&#10;        if (skinItem == null || !skinItem.isOwned) return;&#10;        &#10;        SkinManager.Instance.EquipSkin(skinItem);&#10;        shopUI?.OnSkinEquipped(skinItem);&#10;    }&#10;    &#10;    public void RefreshUI()&#10;    {&#10;        UpdateUI();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinShopUI.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Project/Scripts/Shop/SkinShopUI.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using TMPro;&#10;using System.Collections.Generic;&#10;using System.Collections;&#10;&#10;public class SkinShopUI : MonoBehaviour&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private Transform skinItemsParent;&#10;    [SerializeField] private GameObject skinItemPrefab;&#10;    [SerializeField] private ScrollRect scrollRect;&#10;    &#10;    [Header(&quot;Messages&quot;)]&#10;    [SerializeField] private GameObject insufficientFundsPopup;&#10;    [SerializeField] private TextMeshProUGUI insufficientFundsText;&#10;    [SerializeField] private float messageDisplayTime = 2f;&#10;    &#10;    [Header(&quot;Filters&quot;)]&#10;    [SerializeField] private Button allSkinsButton;&#10;    [SerializeField] private Button ownedSkinsButton;&#10;    [SerializeField] private Button availableSkinsButton;&#10;    &#10;    [Header(&quot;Current Skin Display&quot;)]&#10;    [SerializeField] private Image currentSkinPreview;&#10;    [SerializeField] private TextMeshProUGUI currentSkinNameText;&#10;    &#10;    private List&lt;SkinShopItem&gt; skinItemComponents = new List&lt;SkinShopItem&gt;();&#10;    private FilterType currentFilter = FilterType.All;&#10;    &#10;    public enum FilterType&#10;    {&#10;        All,&#10;        Owned,&#10;        Available&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        InitializeUI();&#10;        SetupFilterButtons();&#10;        &#10;        // Подписываемся на события&#10;        SkinManager.OnSkinPurchased += OnSkinPurchasedHandler;&#10;        SkinManager.OnSkinEquipped += OnSkinEquippedHandler;&#10;        SkinManager.OnSkinsInitialized += RefreshShop;&#10;        &#10;        // Обновляем отображение текущего скина&#10;        UpdateCurrentSkinDisplay();&#10;    }&#10;    &#10;    private void OnDestroy()&#10;    {&#10;        // Отписываемся от событий&#10;        SkinManager.OnSkinPurchased -= OnSkinPurchasedHandler;&#10;        SkinManager.OnSkinEquipped -= OnSkinEquippedHandler;&#10;        SkinManager.OnSkinsInitialized -= RefreshShop;&#10;    }&#10;    &#10;    private void InitializeUI()&#10;    {&#10;        if (insufficientFundsPopup != null)&#10;            insufficientFundsPopup.SetActive(false);&#10;            &#10;        RefreshShop();&#10;    }&#10;    &#10;    private void SetupFilterButtons()&#10;    {&#10;        allSkinsButton?.onClick.AddListener(() =&gt; SetFilter(FilterType.All));&#10;        ownedSkinsButton?.onClick.AddListener(() =&gt; SetFilter(FilterType.Owned));&#10;        availableSkinsButton?.onClick.AddListener(() =&gt; SetFilter(FilterType.Available));&#10;    }&#10;    &#10;    public void SetFilter(FilterType filter)&#10;    {&#10;        currentFilter = filter;&#10;        RefreshShop();&#10;        &#10;        // Обновляем визуальное состояние кнопок фильтров&#10;        UpdateFilterButtonsVisual();&#10;    }&#10;    &#10;    private void UpdateFilterButtonsVisual()&#10;    {&#10;        // Сбрасываем все кнопки&#10;        ResetButtonVisual(allSkinsButton);&#10;        ResetButtonVisual(ownedSkinsButton);&#10;        ResetButtonVisual(availableSkinsButton);&#10;        &#10;        // Выделяем активную кнопку&#10;        Button activeButton = currentFilter switch&#10;        {&#10;            FilterType.All =&gt; allSkinsButton,&#10;            FilterType.Owned =&gt; ownedSkinsButton,&#10;            FilterType.Available =&gt; availableSkinsButton,&#10;            _ =&gt; allSkinsButton&#10;        };&#10;        &#10;        if (activeButton != null)&#10;        {&#10;            ColorBlock colors = activeButton.colors;&#10;            colors.normalColor = colors.selectedColor;&#10;            activeButton.colors = colors;&#10;        }&#10;    }&#10;    &#10;    private void ResetButtonVisual(Button button)&#10;    {&#10;        if (button == null) return;&#10;        &#10;        ColorBlock colors = button.colors;&#10;        colors.normalColor = Color.white;&#10;        button.colors = colors;&#10;    }&#10;    &#10;    public void RefreshShop()&#10;    {&#10;        ClearShopItems();&#10;        PopulateShopItems();&#10;    }&#10;    &#10;    private void ClearShopItems()&#10;    {&#10;        foreach (var item in skinItemComponents)&#10;        {&#10;            if (item != null &amp;&amp; item.gameObject != null)&#10;                DestroyImmediate(item.gameObject);&#10;        }&#10;        skinItemComponents.Clear();&#10;    }&#10;    &#10;    private void PopulateShopItems()&#10;    {&#10;        if (SkinManager.Instance == null) return;&#10;        &#10;        var skinsToShow = GetFilteredSkins();&#10;        &#10;        foreach (var skinItem in skinsToShow)&#10;        {&#10;            CreateSkinItemUI(skinItem);&#10;        }&#10;    }&#10;    &#10;    private IEnumerable&lt;SkinItem&gt; GetFilteredSkins()&#10;    {&#10;        return currentFilter switch&#10;        {&#10;            FilterType.All =&gt; SkinManager.Instance.AllSkins,&#10;            FilterType.Owned =&gt; SkinManager.Instance.OwnedSkins,&#10;            FilterType.Available =&gt; SkinManager.Instance.AvailableForPurchase,&#10;            _ =&gt; SkinManager.Instance.AllSkins&#10;        };&#10;    }&#10;    &#10;    private void CreateSkinItemUI(SkinItem skinItem)&#10;    {&#10;        if (skinItemPrefab == null || skinItemsParent == null) return;&#10;        &#10;        GameObject itemObject = Instantiate(skinItemPrefab, skinItemsParent);&#10;        SkinShopItem shopItem = itemObject.GetComponent&lt;SkinShopItem&gt;();&#10;        &#10;        if (shopItem != null)&#10;        {&#10;            shopItem.Initialize(skinItem, this);&#10;            skinItemComponents.Add(shopItem);&#10;        }&#10;    }&#10;    &#10;    public void OnSkinPurchased(SkinItem skinItem)&#10;    {&#10;        // Обновляем все элементы UI&#10;        RefreshAllSkinItems();&#10;        &#10;        // Показываем сообщение об успешной покупке&#10;        StartCoroutine(ShowPurchaseSuccessMessage(skinItem));&#10;    }&#10;    &#10;    public void OnSkinEquipped(SkinItem skinItem)&#10;    {&#10;        // Обновляем все элементы UI&#10;        RefreshAllSkinItems();&#10;        &#10;        // Обновляем отображение текущего скина&#10;        UpdateCurrentSkinDisplay();&#10;    }&#10;    &#10;    private void OnSkinPurchasedHandler(SkinItem skinItem)&#10;    {&#10;        OnSkinPurchased(skinItem);&#10;    }&#10;    &#10;    private void OnSkinEquippedHandler(SkinItem skinItem)&#10;    {&#10;        OnSkinEquipped(skinItem);&#10;    }&#10;    &#10;    private void RefreshAllSkinItems()&#10;    {&#10;        foreach (var shopItem in skinItemComponents)&#10;        {&#10;            shopItem?.RefreshUI();&#10;        }&#10;    }&#10;    &#10;    private void UpdateCurrentSkinDisplay()&#10;    {&#10;        if (SkinManager.Instance?.CurrentSkin != null)&#10;        {&#10;            var currentSkin = SkinManager.Instance.CurrentSkin;&#10;            &#10;            if (currentSkinPreview != null)&#10;                currentSkinPreview.sprite = currentSkin.skinData.skinPreview;&#10;                &#10;            if (currentSkinNameText != null)&#10;                currentSkinNameText.text = currentSkin.skinData.skinName;&#10;        }&#10;    }&#10;    &#10;    public void ShowInsufficientFundsMessage()&#10;    {&#10;        StartCoroutine(ShowMessage(&quot;Недостаточно средств!&quot;));&#10;    }&#10;    &#10;    private IEnumerator ShowPurchaseSuccessMessage(SkinItem skinItem)&#10;    {&#10;        string message = $&quot;Скин \&quot;{skinItem.skinData.skinName}\&quot; куплен!&quot;;&#10;        yield return ShowMessage(message);&#10;    }&#10;    &#10;    private IEnumerator ShowMessage(string message)&#10;    {&#10;        if (insufficientFundsPopup != null &amp;&amp; insufficientFundsText != null)&#10;        {&#10;            insufficientFundsText.text = message;&#10;            insufficientFundsPopup.SetActive(true);&#10;            &#10;            yield return new WaitForSeconds(messageDisplayTime);&#10;            &#10;            insufficientFundsPopup.SetActive(false);&#10;        }&#10;    }&#10;    &#10;    // Публичные методы для вызова из UI&#10;    public void CloseShop()&#10;    {&#10;        gameObject.SetActive(false);&#10;    }&#10;    &#10;    public void OpenShop()&#10;    {&#10;        gameObject.SetActive(true);&#10;        RefreshShop();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>